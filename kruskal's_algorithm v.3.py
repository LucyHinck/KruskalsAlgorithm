# -*- coding: utf-8 -*-
"""Kruskal's Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZiX3cZ5XueWD1x6ROhUzaWgZAxqnPdKD

Analysis of Algorithms class, Spring 2025, Dr. Sarah Roscoe

Video 2 assignment, Graph Algorithms: Kruskal's Algorithm, Due Aril 18th, 2025

Lucy H., Programmer; Melanie P., Architect; Jack V., Videographer
"""

import networkx as nx

class DisjointSet:
    # set all nodes as parents of themselves
    def __init__(self, n):
        self.parent = list(range(n)) #each node is its own parent,
                           #so each node is it its own set and none are in the same set
        self.rank = [0] * n #create rank (estimated height) for each node staring at zero

    # find root
    def find(self, u):
        if self.parent[u] != u: #if node is not its own parent
            self.parent[u] = self.find(self.parent[u]) #recursibly finds parent until root is located
        return self.parent[u] #and return parent (root of set or self)

    #union two nodes
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)

        if root_u == root_v: #checks if u and v are connected
            return False #u and v are in the same set,  no union needed

        # Union by rank (attacthing smaller tree under larger one)
        if self.rank[root_u] < self.rank[root_v]: #if root of set containing u is smaller than root of set containing v
            self.parent[root_u] = root_v #append root of set u to root of set v
        elif self.rank[root_u] > self.rank[root_v]: #same as above, reveresed
            self.parent[root_v] = root_u
        else:
            self.parent[root_v] = root_u #if roots are equal
            self.rank[root_u] += 1 #add 1 to rank of root_u arbitrarily,  as root_u height has increased by 1

        return True #u and v were in different sets (and now they've been unioned')

# Sort edges based on weight
def kruskals_algorithm(n, edges):
    edges.sort() #sorts edges min to max
    dsu = DisjointSet(n) #run through DisjointedSet for number of nodes n
    mst = [] #final minimum spanning tree
    total_weight = 0 #total weight of mst

    for weight, u, v in edges: #for each edge in edges list
        if dsu.union(u, v): #if the two nodes are not connected already
            mst.append((u, v, weight)) #add edge for final mst
            total_weight += weight #adds weight of new edge to total weight of mst

    return mst, total_weight #return final min spanning tree and final total weight

#library
def kruskal_mst(graph):
  """Finds the Minimum Spanning Tree (MST) of a graph using Kruskal's algorithm."""
  mst = nx.minimum_spanning_tree(graph, algorithm="kruskal")
  return mst


# IMPLEMENTATION

#Melanie's Example with 10 edges
if __name__ == "__main__":
    Melanie_Ex = [
       (4, 1, 2),  #one edge (weight, u, v)
        (9, 2, 4),
        (2, 1, 3),
        (3, 1, 4),
        (5, 3, 5),
        (1, 5, 6),
        (12, 6, 7),
        (10, 7, 9),
        (3, 7, 8),
        (2, 8, 9),
    ]
    m = 10  #number of nodes
    m_mst, m_total = kruskals_algorithm(m, Melanie_Ex)

    #networx library implementation
    graph = nx.Graph()
    graph.add_weighted_edges_from(Melanie_Ex)
    l_m_mst = kruskal_mst(graph)

#Second example with 25 edges.
#Nodes are street numbers, edges are time in minutes between houses by walking
    edges = [
        (4, 26, 44),  #(weight, u, v)
        (9, 44, 4),
        (2, 26, 88),
        (3, 26, 62),
        (5, 88, 87),
        (1, 87, 24),
        (12, 24, 82),
        (10, 82, 27),
        (3, 82, 70),
        (14, 70, 27),
        (8, 8, 27),
        (0, 8, 10),
        (5, 27, 16),
        (3, 16, 14),
        (6, 14, 12),
        (2, 14, 44),
        (12, 14, 13),
        (17, 13, 61),
        (15, 14, 100),
        (4, 100, 21),
        (9, 21, 35),
        (7, 35, 61),
        (4, 61, 19),
        (9, 19, 20),
        (8, 20, 61),
    ]
    n = 101
    e_mst, e_total = kruskals_algorithm(n, edges)

    #networx library implementation
    e_graph = nx.Graph()
    e_graph.add_weighted_edges_from(edges)
    l_e_mst = kruskal_mst(e_graph)


#The architect', Melanie's, example with numbers coorosponding to the letter nodes
    print("Melanie's Example: ")
    print("Edges in MST:", m_mst)
    print("Total weight:", m_total)
    print("Library networx:", l_m_mst.edges(data=True))
    print(" ")

#second example
    print("Second Example: ")
    print("Edges in MST:", e_mst)
    print("Total weight:", e_total)
    print("Library networx:", l_e_mst.edges(data=True))