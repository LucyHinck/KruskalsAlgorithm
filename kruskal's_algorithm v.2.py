# -*- coding: utf-8 -*-
"""Kruskal's Algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZiX3cZ5XueWD1x6ROhUzaWgZAxqnPdKD

Analysis of Algorithms Video 2 Project: Kruskal's Algorithm

Lucy Hinck, Programmer
"""

class DisjointSet:
    # set all nodes as parents of themselves
    def __init__(self, n):
        self.parent = list(range(n)) #each node is its own parent,
                           #so each node is it its own set and none are in the same set
        self.rank = [0] * n #create rank (estimated height) for each node staring at zero

    # find root
    def find(self, u):
        if self.parent[u] != u: #if node is not its own parent
            self.parent[u] = self.find(self.parent[u]) #recursibly finds parent until root is located
        return self.parent[u] #and return parent (root of set or self)

    #union two nodes
    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)

        if root_u == root_v: #checks if u and v are connected
            return False #u and v are in the same set,  no union needed

        # Union by rank (attacthing smaller tree under larger one)
        if self.rank[root_u] < self.rank[root_v]: #if root of set containing u is smaller than root of set containing v
            self.parent[root_u] = root_v #append root of set u to root of set v
        elif self.rank[root_u] > self.rank[root_v]: #same as above, reveresed
            self.parent[root_v] = root_u
        else:
            self.parent[root_v] = root_u #if roots are equal
            self.rank[root_u] += 1 #add 1 to rank of root_u arbitrarily,  as root_u height has increased by 1

        return True #u and v were in different sets (and now they've been unioned')

# Sort edges based on weight
def kruskals_algorithm(n, edges):
    edges.sort() #sorts edges min to max
    dsu = DisjointSet(n) #run through DisjointedSet for number of nodes n
    mst = [] #final minimum spanning tree
    total_weight = 0 #total weight of mst

    for weight, u, v in edges: #for each edge in edges list
        if dsu.union(u, v): #if the two nodes are not connected already
            mst.append((u, v, weight)) #add egde for final mst
            total_weight += weight #adds weight of new edge to total weight of mst

    return mst, total_weight #return final min spanning tree and final total weight


# IMPLEMENTATION
if __name__ == "__main__":
    edges = [
        (4, 1, 2),  #one edge (weight, u, v)
        (9, 2, 4),
        (2, 1, 3),
        (3, 1, 4),
        (5, 3, 5),
        (1, 5, 6),
        (12, 6, 7),
        (10, 7, 9),
        (3, 7, 8),
        (2, 8, 9),
    ]
    n = 10  #number of nodes

    mst, total = kruskals_algorithm(n, edges)

    print("Edges in MST:", mst)
    print("Total weight:", total)

# IMPLEMENTATION
if __name__ == "__main__":
    edges = [
        (10, 0, 1),  #one edge (weight, u, v)
        (6, 0, 2),
        (5, 1, 2),
        (15, 1, 3),
        (4, 2, 3)
    ]
    n = 4  #number of nodes

    mst, total = kruskals_algorithm(n, edges)
    print("Edges in MST:", mst)
    print("Total weight:", total)